// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_Block_Mat_exit45_proc42 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        cols,
        C_XR0C2,
        c_high_thresh,
        C_XR2C2,
        C_XR2C1,
        C_XR1C1,
        c_low_thresh,
        C_YR0C1,
        C_YR0C2,
        C_XR0C0,
        C_XR2C0,
        C_XR1C2,
        C_YR2C0,
        C_YR2C1,
        C_YR1C1,
        C_XR1C0,
        C_XR0C1,
        C_YR0C0,
        C_YR1C0,
        C_YR1C2,
        c_invert,
        rows_out_din,
        rows_out_full_n,
        rows_out_write,
        cols_out_din,
        cols_out_full_n,
        cols_out_write,
        img_1_rows_V_out_din,
        img_1_rows_V_out_full_n,
        img_1_rows_V_out_write,
        img_1_cols_V_out_din,
        img_1_cols_V_out_full_n,
        img_1_cols_V_out_write,
        C_XR0C2_out_din,
        C_XR0C2_out_full_n,
        C_XR0C2_out_write,
        c_high_thresh_out_din,
        c_high_thresh_out_full_n,
        c_high_thresh_out_write,
        C_XR2C2_out_din,
        C_XR2C2_out_full_n,
        C_XR2C2_out_write,
        C_XR2C1_out_din,
        C_XR2C1_out_full_n,
        C_XR2C1_out_write,
        C_XR1C1_out_din,
        C_XR1C1_out_full_n,
        C_XR1C1_out_write,
        c_low_thresh_out_din,
        c_low_thresh_out_full_n,
        c_low_thresh_out_write,
        C_YR0C1_out_din,
        C_YR0C1_out_full_n,
        C_YR0C1_out_write,
        C_YR0C2_out_din,
        C_YR0C2_out_full_n,
        C_YR0C2_out_write,
        C_XR0C0_out_din,
        C_XR0C0_out_full_n,
        C_XR0C0_out_write,
        C_XR2C0_out_din,
        C_XR2C0_out_full_n,
        C_XR2C0_out_write,
        C_XR1C2_out_din,
        C_XR1C2_out_full_n,
        C_XR1C2_out_write,
        C_YR2C0_out_din,
        C_YR2C0_out_full_n,
        C_YR2C0_out_write,
        C_YR2C1_out_din,
        C_YR2C1_out_full_n,
        C_YR2C1_out_write,
        C_YR1C1_out_din,
        C_YR1C1_out_full_n,
        C_YR1C1_out_write,
        C_XR1C0_out_din,
        C_XR1C0_out_full_n,
        C_XR1C0_out_write,
        C_XR0C1_out_din,
        C_XR0C1_out_full_n,
        C_XR0C1_out_write,
        C_YR0C0_out_din,
        C_YR0C0_out_full_n,
        C_YR0C0_out_write,
        C_YR1C0_out_din,
        C_YR1C0_out_full_n,
        C_YR1C0_out_write,
        C_YR1C2_out_din,
        C_YR1C2_out_full_n,
        C_YR1C2_out_write,
        c_invert_out_din,
        c_invert_out_full_n,
        c_invert_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows;
input  [31:0] cols;
input  [31:0] C_XR0C2;
input  [31:0] c_high_thresh;
input  [31:0] C_XR2C2;
input  [31:0] C_XR2C1;
input  [31:0] C_XR1C1;
input  [31:0] c_low_thresh;
input  [31:0] C_YR0C1;
input  [31:0] C_YR0C2;
input  [31:0] C_XR0C0;
input  [31:0] C_XR2C0;
input  [31:0] C_XR1C2;
input  [31:0] C_YR2C0;
input  [31:0] C_YR2C1;
input  [31:0] C_YR1C1;
input  [31:0] C_XR1C0;
input  [31:0] C_XR0C1;
input  [31:0] C_YR0C0;
input  [31:0] C_YR1C0;
input  [31:0] C_YR1C2;
input  [31:0] c_invert;
output  [31:0] rows_out_din;
input   rows_out_full_n;
output   rows_out_write;
output  [31:0] cols_out_din;
input   cols_out_full_n;
output   cols_out_write;
output  [11:0] img_1_rows_V_out_din;
input   img_1_rows_V_out_full_n;
output   img_1_rows_V_out_write;
output  [11:0] img_1_cols_V_out_din;
input   img_1_cols_V_out_full_n;
output   img_1_cols_V_out_write;
output  [31:0] C_XR0C2_out_din;
input   C_XR0C2_out_full_n;
output   C_XR0C2_out_write;
output  [31:0] c_high_thresh_out_din;
input   c_high_thresh_out_full_n;
output   c_high_thresh_out_write;
output  [31:0] C_XR2C2_out_din;
input   C_XR2C2_out_full_n;
output   C_XR2C2_out_write;
output  [31:0] C_XR2C1_out_din;
input   C_XR2C1_out_full_n;
output   C_XR2C1_out_write;
output  [31:0] C_XR1C1_out_din;
input   C_XR1C1_out_full_n;
output   C_XR1C1_out_write;
output  [31:0] c_low_thresh_out_din;
input   c_low_thresh_out_full_n;
output   c_low_thresh_out_write;
output  [31:0] C_YR0C1_out_din;
input   C_YR0C1_out_full_n;
output   C_YR0C1_out_write;
output  [31:0] C_YR0C2_out_din;
input   C_YR0C2_out_full_n;
output   C_YR0C2_out_write;
output  [31:0] C_XR0C0_out_din;
input   C_XR0C0_out_full_n;
output   C_XR0C0_out_write;
output  [31:0] C_XR2C0_out_din;
input   C_XR2C0_out_full_n;
output   C_XR2C0_out_write;
output  [31:0] C_XR1C2_out_din;
input   C_XR1C2_out_full_n;
output   C_XR1C2_out_write;
output  [31:0] C_YR2C0_out_din;
input   C_YR2C0_out_full_n;
output   C_YR2C0_out_write;
output  [31:0] C_YR2C1_out_din;
input   C_YR2C1_out_full_n;
output   C_YR2C1_out_write;
output  [31:0] C_YR1C1_out_din;
input   C_YR1C1_out_full_n;
output   C_YR1C1_out_write;
output  [31:0] C_XR1C0_out_din;
input   C_XR1C0_out_full_n;
output   C_XR1C0_out_write;
output  [31:0] C_XR0C1_out_din;
input   C_XR0C1_out_full_n;
output   C_XR0C1_out_write;
output  [31:0] C_YR0C0_out_din;
input   C_YR0C0_out_full_n;
output   C_YR0C0_out_write;
output  [31:0] C_YR1C0_out_din;
input   C_YR1C0_out_full_n;
output   C_YR1C0_out_write;
output  [31:0] C_YR1C2_out_din;
input   C_YR1C2_out_full_n;
output   C_YR1C2_out_write;
output  [31:0] c_invert_out_din;
input   c_invert_out_full_n;
output   c_invert_out_write;
output  [11:0] ap_return_0;
output  [11:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rows_out_write;
reg cols_out_write;
reg img_1_rows_V_out_write;
reg img_1_cols_V_out_write;
reg C_XR0C2_out_write;
reg c_high_thresh_out_write;
reg C_XR2C2_out_write;
reg C_XR2C1_out_write;
reg C_XR1C1_out_write;
reg c_low_thresh_out_write;
reg C_YR0C1_out_write;
reg C_YR0C2_out_write;
reg C_XR0C0_out_write;
reg C_XR2C0_out_write;
reg C_XR1C2_out_write;
reg C_YR2C0_out_write;
reg C_YR2C1_out_write;
reg C_YR1C1_out_write;
reg C_XR1C0_out_write;
reg C_XR0C1_out_write;
reg C_YR0C0_out_write;
reg C_YR1C0_out_write;
reg C_YR1C2_out_write;
reg c_invert_out_write;
reg[11:0] ap_return_0;
reg[11:0] ap_return_1;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg    ap_sig_bdd_200;
wire   [11:0] img_0_rows_V_fu_430_p1;
wire   [11:0] img_0_cols_V_fu_435_p1;
reg   [11:0] ap_return_0_preg = 12'b000000000000;
reg   [11:0] ap_return_1_preg = 12'b000000000000;
reg   [0:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_return_0_preg
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
            ap_return_0_preg <= img_0_rows_V_fu_430_p1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_return_1_preg
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
            ap_return_1_preg <= img_0_cols_V_fu_435_p1;
        end
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR0C0_out_write = ap_const_logic_1;
    end else begin
        C_XR0C0_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR0C1_out_write = ap_const_logic_1;
    end else begin
        C_XR0C1_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR0C2_out_write = ap_const_logic_1;
    end else begin
        C_XR0C2_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR1C0_out_write = ap_const_logic_1;
    end else begin
        C_XR1C0_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR1C1_out_write = ap_const_logic_1;
    end else begin
        C_XR1C1_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR1C2_out_write = ap_const_logic_1;
    end else begin
        C_XR1C2_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR2C0_out_write = ap_const_logic_1;
    end else begin
        C_XR2C0_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR2C1_out_write = ap_const_logic_1;
    end else begin
        C_XR2C1_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_XR2C2_out_write = ap_const_logic_1;
    end else begin
        C_XR2C2_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR0C0_out_write = ap_const_logic_1;
    end else begin
        C_YR0C0_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR0C1_out_write = ap_const_logic_1;
    end else begin
        C_YR0C1_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR0C2_out_write = ap_const_logic_1;
    end else begin
        C_YR0C2_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR1C0_out_write = ap_const_logic_1;
    end else begin
        C_YR1C0_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR1C1_out_write = ap_const_logic_1;
    end else begin
        C_YR1C1_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR1C2_out_write = ap_const_logic_1;
    end else begin
        C_YR1C2_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR2C0_out_write = ap_const_logic_1;
    end else begin
        C_YR2C0_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        C_YR2C1_out_write = ap_const_logic_1;
    end else begin
        C_YR2C1_out_write = ap_const_logic_0;
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200 or img_0_rows_V_fu_430_p1 or ap_return_0_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        ap_return_0 = img_0_rows_V_fu_430_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200 or img_0_cols_V_fu_435_p1 or ap_return_1_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        ap_return_1 = img_0_cols_V_fu_435_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (ap_sig_bdd_20) begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        c_high_thresh_out_write = ap_const_logic_1;
    end else begin
        c_high_thresh_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        c_invert_out_write = ap_const_logic_1;
    end else begin
        c_invert_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        c_low_thresh_out_write = ap_const_logic_1;
    end else begin
        c_low_thresh_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        cols_out_write = ap_const_logic_1;
    end else begin
        cols_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        img_1_cols_V_out_write = ap_const_logic_1;
    end else begin
        img_1_cols_V_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        img_1_rows_V_out_write = ap_const_logic_1;
    end else begin
        img_1_rows_V_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_200) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_200)) begin
        rows_out_write = ap_const_logic_1;
    end else begin
        rows_out_write = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_200) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign C_XR0C0_out_din = C_XR0C0;

assign C_XR0C1_out_din = C_XR0C1;

assign C_XR0C2_out_din = C_XR0C2;

assign C_XR1C0_out_din = C_XR1C0;

assign C_XR1C1_out_din = C_XR1C1;

assign C_XR1C2_out_din = C_XR1C2;

assign C_XR2C0_out_din = C_XR2C0;

assign C_XR2C1_out_din = C_XR2C1;

assign C_XR2C2_out_din = C_XR2C2;

assign C_YR0C0_out_din = C_YR0C0;

assign C_YR0C1_out_din = C_YR0C1;

assign C_YR0C2_out_din = C_YR0C2;

assign C_YR1C0_out_din = C_YR1C0;

assign C_YR1C1_out_din = C_YR1C1;

assign C_YR1C2_out_din = C_YR1C2;

assign C_YR2C0_out_din = C_YR2C0;

assign C_YR2C1_out_din = C_YR2C1;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_start or ap_done_reg or rows_out_full_n or cols_out_full_n or img_1_rows_V_out_full_n or img_1_cols_V_out_full_n or C_XR0C2_out_full_n or c_high_thresh_out_full_n or C_XR2C2_out_full_n or C_XR2C1_out_full_n or C_XR1C1_out_full_n or c_low_thresh_out_full_n or C_YR0C1_out_full_n or C_YR0C2_out_full_n or C_XR0C0_out_full_n or C_XR2C0_out_full_n or C_XR1C2_out_full_n or C_YR2C0_out_full_n or C_YR2C1_out_full_n or C_YR1C1_out_full_n or C_XR1C0_out_full_n or C_XR0C1_out_full_n or C_YR0C0_out_full_n or C_YR1C0_out_full_n or C_YR1C2_out_full_n or c_invert_out_full_n) begin
    ap_sig_bdd_200 = ((rows_out_full_n == ap_const_logic_0) | (cols_out_full_n == ap_const_logic_0) | (C_XR0C2_out_full_n == ap_const_logic_0) | (c_high_thresh_out_full_n == ap_const_logic_0) | (C_XR2C2_out_full_n == ap_const_logic_0) | (C_XR2C1_out_full_n == ap_const_logic_0) | (C_XR1C1_out_full_n == ap_const_logic_0) | (c_low_thresh_out_full_n == ap_const_logic_0) | (C_YR0C1_out_full_n == ap_const_logic_0) | (C_YR0C2_out_full_n == ap_const_logic_0) | (C_XR0C0_out_full_n == ap_const_logic_0) | (C_XR2C0_out_full_n == ap_const_logic_0) | (C_XR1C2_out_full_n == ap_const_logic_0) | (C_YR2C0_out_full_n == ap_const_logic_0) | (C_YR2C1_out_full_n == ap_const_logic_0) | (C_YR1C1_out_full_n == ap_const_logic_0) | (C_XR1C0_out_full_n == ap_const_logic_0) | (C_XR0C1_out_full_n == ap_const_logic_0) | (C_YR0C0_out_full_n == ap_const_logic_0) | (C_YR1C0_out_full_n == ap_const_logic_0) | (C_YR1C2_out_full_n == ap_const_logic_0) | (c_invert_out_full_n == ap_const_logic_0) | (img_1_rows_V_out_full_n == ap_const_logic_0) | (img_1_cols_V_out_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

assign c_high_thresh_out_din = c_high_thresh;

assign c_invert_out_din = c_invert;

assign c_low_thresh_out_din = c_low_thresh;

assign cols_out_din = cols;

assign img_0_cols_V_fu_435_p1 = cols[11:0];

assign img_0_rows_V_fu_430_p1 = rows[11:0];

assign img_1_cols_V_out_din = img_0_cols_V_fu_435_p1;

assign img_1_rows_V_out_din = img_0_rows_V_fu_430_p1;

assign rows_out_din = rows;


endmodule //image_filter_Block_Mat_exit45_proc42

